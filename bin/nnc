#!/bin/bash
#
# nnc is used to start or stop all the namenodes listed in 
# ${HADOOP_CONF_DIR}/namenodes except itself in slave mode,
# and other administration work for NNC
#
# Author: Xu Wang &lt;gnawux(at)gmail(dot)com&gt;
#################################################################

SLAVE_NAMENODE_FLAG="-slave"

bin=`dirname "$0"`
bin=`cd "$bin"; pwd`

. "$bin"/hadoop-config.sh

if [ $# = 0 ]; then
	echo "Usage: coming soon..."
fi
COMMAND=$1
shift

if [ -f "${HADOOP_CONF_DIR}/hadoop-env.sh" ]; then
  . "${HADOOP_CONF_DIR}/hadoop-env.sh"
fi

if [ "$HADOOP_LOG_DIR" = "" ]; then
  HADOOP_LOG_DIR="$HADOOP_HOME/logs"
fi

NNC_LOG_FILE=${HADOOP_LOG_DIR}/nnc.log

mkdir -p $HADOOP_LOG_DIR

if [ "$HADOOP_PID_DIR" = "" ]; then
  HADOOP_PID_DIR=/tmp
fi

mkdir -p $HADOOP_PID_DIR

if [ "$HADOOP_IDENT_STRING" = "" ]; then
  export HADOOP_IDENT_STRING="$USER"
fi

pid=$HADOOP_PID_DIR/hadoop-$HADOOP_IDENT_STRING-namenode.pid

# Set default scheduling priority
if [ "$HADOOP_NICENESS" = "" ]; then
    export HADOOP_NICENESS=0
fi


if [ -e ${HADOOP_CONF_DIR}/namenodes ]
then
	NAMENODE_HOSTS=${HADOOP_CONF_DIR}/namenodes
else
	echo "FATAL: conf/namenodes file does not exist, could not start slave namenodes." > ${NNC_LOG_FILE}
	exit -1
fi

for_each_namenode(){
	for slave in `cat "$NAMENODE_HOSTS"|sed  "s/#.*$//;s/.*localhost.*//;s/.*$(uname -n)//;/^$/d"`; do
	 ping -c 1 -w 1 $slave >/dev/null 2>&1 && ssh $HADOOP_SSH_OPTS $slave $"${@// /\\ }" \
	   2>&1 | sed "s/^/$slave: /" &
	done

	wait
}

kill_running_namenode(){

	echo "INFO: Kill NameNodes" >> $NNC_LOG_FILE

    psresult=$(${JAVA_HOME}/bin/jps | grep "NameNode")
    ret=$?

    if [ $ret -eq 0 ]; then
        ${JAVA_HOME}/bin/jps | awk '/NameNode/ {print $1}' | xargs kill > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            sleep 1
            return 0
        else
			psresult=$(${JAVA_HOME}/bin/jps | grep "NameNode")
			nnpid=$(echo $psresult | awk '{print $1}')
			echo "ERROR: kill NameNode: namenode $nnpid could not be killed" >> $NNC_LOG_FILE
            return 1
        fi
    else
        echo "INFO: kill NameNode: no NameNode is running" >> $NNC_LOG_FILE
        return 0
    fi
}

nnc_get_status() {

    NNC_HOST=$(uname -n)

    if [ -f $pid ]; then
      if ps `cat $pid` > /dev/null 2>&1; then
		  
		# 'master' or 'slave' if success
        NNC_STATE=$(${NNC_HOME}/bin/hadoop dfsadmin -status $NNC_HOST:$NNC_PORT 2>/dev/null)
        ret=$?

        if [ $ret -ne 0 ]; then
            NNC_STATE="Not configured"
        fi

      fi
    fi

	NNC_STATE="Not configured"
}


start_master_internal(){
	echo "INFO: Start master NameNode" > ${NNC_LOG_FILE}
	"$bin"/hadoop-daemon.sh --config $HADOOP_CONF_DIR start namenode
}

start_slaves(){
	echo "INFO: Start slave NameNodes" > ${NNC_LOG_FILE}
    for_each_namenode cd "$HADOOP_HOME" \; "$bin/hadoop-daemon.sh" --config $HADOOP_CONF_DIR start namenode ${SLAVE_NAMENODE_FLAG}
}

start_master(){

	nnc_get_status

	if [ "$NNC_STATE" = "master" ]; then
		return 0
	fi
	
	if [ "$NNC_STATE" != "slave" ]; then
		start_master_internal
		return $?
	fi

	if $bin/hadoop dfsadmin --setasmaster $NNC_HOST:$NNC_PORT; then
		nnc_get_status

		if [ "$NNC_STATE" = "master" ]; then
			echo "promote: primary succeeded" >> $NNC_LOG_FILE
			return 0
		else 
			echo "promote: Not primary despite call." >> $NNC_LOG_FILE
		fi
		
	else
		echo "promote: Failed with exit code $?." >> $NNC_LOG_FILE
	fi
	return 1
}

case ${COMMAND} in 
	start-master) start_master
	;;
	start-slaves) start_slaves
	;;
	kill-running) kill_running_namenode
	;;
esac

